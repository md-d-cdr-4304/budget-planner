Create a detailed microservices architecture diagram for a Budget Planner application with the following components:

EXTERNAL LAYER:
- Web Browser (user interface)
- NodePort Service (port 30000) for external access

APPLICATION LAYER:
- Budget Service (Flask app with web UI, REST API, session management)
- Auth Service (Flask app with JWT tokens, bcrypt password hashing, rate limiting)

DATA LAYER:
- MongoDB (document database with persistent storage)
- PersistentVolumeClaim (PVC) for data persistence

INFRASTRUCTURE LAYER:
- Kubernetes Cluster with namespace "budget-planner"
- Horizontal Pod Autoscaler (HPA) for scaling
- ConfigMaps and Secrets for configuration

SERVICE COMMUNICATIONS:
1. Browser → Budget Service (NodePort 30000) → Auth Service (JWT verification) → MongoDB (data storage)
2. Budget Service ↔ MongoDB (budget/expense CRUD operations)
3. Auth Service ↔ MongoDB (user authentication data)
4. Kubernetes manages all deployments, services, and scaling

TECHNICAL STACK:
- Container Images: dilshaan/budget-planner-auth:latest, dilshaan/budget-planner-budget:latest, mongo:latest
- Ports: 30000 (external), 5000 (budget), 5001 (auth), 27017 (mongodb)
- Protocols: HTTP/HTTPS, JWT tokens, MongoDB wire protocol
- Features: Dark mode, search, filtering, data visualization with Chart.js

VISUAL REQUIREMENTS:
- Use different colors for each layer (blue for external, green for app, purple for data, gray for infrastructure)
- Show data flow arrows with labels
- Include port numbers and service names
- Display authentication flows and security features
- Show scaling mechanisms and load balancing
- Professional, detailed, suitable for technical documentation

The diagram should clearly show how users access the application through a web browser, how the Budget Service handles the UI and API, how the Auth Service manages authentication, and how MongoDB stores all data with persistent storage.
