# Budget Planner - Complete Kubernetes Deployment
# This file contains all resources needed to deploy the Budget Planner application

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: budget-planner
  labels:
    name: budget-planner
    app: budget-planner

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: budget-planner
data:
  # MongoDB connection string (credentials from Secret)
  mongo-uri: "mongodb://$(MONGO_USERNAME):$(MONGO_PASSWORD)@mongo-service:27017/budget_planner?authSource=admin"
  
  # Application configuration
  app-name: "Budget Planner"
  app-version: "1.0.0"
  
  # Environment
  environment: "production"

---
# MongoDB initialization script
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-script
  namespace: budget-planner
data:
  init-mongo.js: |
    // MongoDB initialization script
    db = db.getSiblingDB('budget_planner');
    
    // Create collections
    db.createCollection('users');
    db.createCollection('monthly_budgets');
    db.createCollection('daily_expenses');
    
    // Create indexes for better performance
    db.users.createIndex({ "username": 1 }, { unique: true });
    db.monthly_budgets.createIndex({ "user_id": 1, "month": 1 });
    db.daily_expenses.createIndex({ "user_id": 1, "date": 1 });
    
    print("MongoDB initialization completed successfully!");

---
# Secrets for application
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: budget-planner
type: Opaque
data:
  # Base64 encoded secret key for JWT signing
  # Generated: BudgetPlanner2024!SecureKey
  secret-key: QnVkZ2V0UGxhbm5lcjIwMjQhU2VjdXJlS2V5

---
# MongoDB Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
  namespace: budget-planner
type: Opaque
data:
  # Base64 encoded secure credentials
  # username: mongo_admin
  # password: MongoDB2024!SecurePass
  # root-username: mongo_admin  
  # root-password: MongoDB2024!SecurePass
  username: bW9uZ29fYWRtaW4=
  password: TW9uZ29EQjIwMjQhU2VjdXJlUGFzcw==
  root-username: bW9uZ29fYWRtaW4=
  root-password: TW9uZ29EQjIwMjQhU2VjdXJlUGFzcw==

---
# MongoDB PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: budget-planner
  labels:
    app: mongo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: budget-planner
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_DATABASE
          value: "budget_planner"
        volumeMounts:
        - name: mongo-storage
          mountPath: /data/db
        - name: mongo-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 10
      volumes:
      - name: mongo-storage
        persistentVolumeClaim:
          claimName: mongo-pvc
      - name: mongo-init
        configMap:
          name: mongo-init-script

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: budget-planner
  labels:
    app: mongo
spec:
  selector:
    app: mongo
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
    name: mongodb
  type: ClusterIP

---
# Auth Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  namespace: budget-planner
  labels:
    app: auth-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
      - name: auth-service
        image: dilshaan/budget-planner-auth:latest
        ports:
        - containerPort: 5001
        env:
        - name: PORT
          value: "5001"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key
        - name: MONGO_URI
          value: "mongodb://mongo-service:27017/budget_planner"
        - name: DEBUG
          value: "false"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Auth Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: budget-planner
  labels:
    app: auth-service
spec:
  selector:
    app: auth-service
  ports:
  - protocol: TCP
    port: 5001
    targetPort: 5001
    name: http
  type: ClusterIP

---
# Auth Service (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: auth-nodeport
  namespace: budget-planner
  labels:
    app: auth-service
spec:
  type: NodePort
  selector:
    app: auth-service
  ports:
  - protocol: TCP
    port: 5001
    targetPort: 5001
    nodePort: 30001
    name: http

---
# Budget Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: budget-deployment
  namespace: budget-planner
  labels:
    app: budget-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: budget-service
  template:
    metadata:
      labels:
        app: budget-service
    spec:
      containers:
      - name: budget-service
        image: dilshaan/budget-planner-budget:latest
        ports:
        - containerPort: 5000
        env:
        - name: PORT
          value: "5000"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key
        - name: AUTH_SERVICE_URL
          value: "http://auth-service:5001"
        - name: MONGO_URI
          value: "mongodb://mongo-service:27017/budget_planner"
        - name: DEBUG
          value: "false"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Budget Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: budget-service
  namespace: budget-planner
  labels:
    app: budget-service
spec:
  selector:
    app: budget-service
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
    name: http
  type: ClusterIP

---
# Budget Service (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: budget-nodeport
  namespace: budget-planner
  labels:
    app: budget-service
spec:
  type: NodePort
  selector:
    app: budget-service
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
    nodePort: 30000
    name: http

---
# Auth Service HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-hpa
  namespace: budget-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Budget Service HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: budget-hpa
  namespace: budget-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: budget-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
